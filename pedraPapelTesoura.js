  
        var elementos = document.querySelectorAll('.player-options div > img') // Seleciona todos os elementos de imagem dentro das divs com a classe "player-options" e salva em uma vari√°vel chamada "elementos".
        var playerOpt = ""; //Declara uma vari√°vel vazia chamada "playerOpt" para armazenar a escolha do jogador.
        var inimigoOpt ="";//Declara uma vari√°vel vazia chamada "inimigoOtp" para armazenar a escolha da IA.

        function resetInimigo(){// Define uma fun√ß√£o chamada "resetInimigo" que redefine a apar√™ncia das op√ß√µes do inimigo para o estado padr√£o.
            const enemyOptions = document.querySelectorAll('.enemy-options div')
            for(var i = 0; i < enemyOptions.length; i++){
                    enemyOptions[i].childNodes[0].style.opacity = 0.2;
                    enemyOptions[i].childNodes[0].style.width = "100px";
                    enemyOptions[i].childNodes[0].style.maxWidth = "200px";
                    enemyOptions[i].childNodes[0].style.transition = "0.5s";
                    
                }
        };

        function inimigoJogar(){//Define uma fun√ß√£o chamada "inimigoJogar" que implementa a l√≥gica do jogo para a jogada do inimigo.
            let rand = Math.floor(Math.random()*3); //Gera um n√∫mero aleat√≥rio entre 0 e 2 e salva em uma vari√°vel chamada "rand".
           
            const enemyOptions = document.querySelectorAll('.enemy-options div')// Seleciona todos os elementos div dentro da classe "enemy-options" e salva em uma vari√°vel chamada "enemyOptions".
            resetInimigo();//Chama a fun√ß√£o "resetInimigo" para redefinir a apar√™ncia das op√ß√µes do inimigo.
            for(var i = 0; i < enemyOptions.length; i++){
                if(i == rand){//Verifica se o √≠ndice do loop "i" √© igual ao n√∫mero aleat√≥rio gerado "rand".
                    enemyOptions[i].childNodes[0].style.opacity = 1;
                    enemyOptions[i].childNodes[0].style.width = "200px";
                    enemyOptions[i].childNodes[0].style.transition = "1s";
                    inimigoOpt = enemyOptions[i].childNodes[0].getAttribute('opt') //Salva o atributo "opt" da imagem escolhida pelo inimigo na vari√°vel "inimigoOpt".
                    
                    

                }

            }
         
           /*Os pr√≥ximos 6 blocos de c√≥digo (come√ßando com "if(playerOpt == 'pedra' && inimigoOpt == 'papel')") 
           verificam todas as combina√ß√µes poss√≠veis de escolhas do jogador e do inimigo e determinam o resultado do jogo.
            Se uma combina√ß√£o correspondente √© encontrada, um som √© tocado e uma mensagem √© exibida com o resultado.*/
        if(playerOpt == 'pedra' && inimigoOpt == 'papel'){
            setTimeout(function(){//Define um atraso de 5s antes de executar o c√≥digo dentro da fun√ß√£o de retorno. Isso √© usado para dar tempo suficiente para a anima√ß√£o de escolha do inimigo ser exibida antes de exibir o resultado.
                document.getElementById('derrota').play();
                alert('Voc√™ perdeuü•∫ü•∫ü•∫');
        },500);
        }else if( playerOpt == 'papel' && inimigoOpt == 'tesoura'){
            setTimeout(function(){
                document.getElementById('derrota').play();
                alert('Voc√™ perdeuü•∫ü•∫ü•∫');
        },500);
        }else if( playerOpt == 'tesoura' && inimigoOpt == 'pedra'){
            setTimeout(function(){
                document.getElementById('derrota').play();
                alert('Voc√™ perdeuü•∫ü•∫ü•∫');
        },500);
        }else if(playerOpt == 'papel' && inimigoOpt == 'pedra'){
            setTimeout(function(){
            document.getElementById('vitoria').play();
                alert('Parab√©ns, voc√™ VenceuüòÄ!!!!');
        },500);

        }else if(playerOpt == 'pedra' && inimigoOpt == 'tesoura'){
            setTimeout(function(){
            document.getElementById('vitoria').play();
            alert('Parab√©ns, voc√™ VenceuüòÄ!!!!');
        },500);
        }else if(playerOpt == 'tesoura' && inimigoOpt == 'papel'){
            setTimeout(function(){
            document.getElementById('vitoria').play();
            alert('Parab√©ns, voc√™ VenceuüòÄ!!!!');
        },500);
        }else{
            setTimeout(function(){
            document.getElementById('empate').play();
           alert('EMPATEü§î!!');
        },500);
        }
        setTimeout(function(){
            const enemyOptions = document.querySelectorAll('.enemy-options div');
            for(var i = 0; i < enemyOptions.length; i++){
            enemyOptions[i].childNodes[0].style.opacity = 0.2;
            enemyOptions[i].childNodes[0].style.width = "100px";
            
            
        }
        },2000)//Define um atraso de 2 segundos antes de executar o c√≥digo dentro da fun√ß√£o de retorno. Isso √© usado para redefinir a apar√™ncia das op√ß√µes do inimigo ap√≥s a exibi√ß√£o do resultado.

        
        }
     
        function resetOpacidadePlayer(){//Define uma fun√ß√£o chamada "resetOpacidadePlayer" que redefine a opacidade de todas as op√ß√µes do jogador para o estado padr√£o.
            for(var i = 0; i < elementos.length; i++){
                elementos[i].style.opacity = 0.3;
                
            }
        }
            /*O loop "for" abaixo adiciona um evento de clique a cada op√ß√£o do jogador. 
            Quando uma op√ß√£o √© clicada, a opacidade de todas as op√ß√µes do jogador √© redefinida para o estado padr√£o e a opacidade da op√ß√£o clicada para 1 e atribui a op√ß√£o escolhida do player em opt*/
        for(var i = 0 ; i < elementos.length; i++){
            elementos[i].addEventListener('click',(t)=>{ //usamos t para target, pare recuperar o que foi clicado
                resetOpacidadePlayer();
                t.target.style.opacity = 1;
                playerOpt = t.target.getAttribute('opt');
                
                inimigoJogar();


            });
            
        }
   
